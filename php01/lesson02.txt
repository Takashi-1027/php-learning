文字列を連結しよう
ドット「.」記号を用いると文字列を連結することが出来ます。文字列同士の連結、変数と文字列の連結、変数同士の連結をすることができます。

参考画像：PHP_image_14.jpg


文字列を連結しよう（2）
「.=」を用いると変数と文字列の連結を省略して書くことが出来ます。

参考画像：PHP_image_15.jpg


変数展開
ダブルクォーテーションで文字列を囲んだ場合、中の変数を{}で囲むとその部分が変数に入っている値で置き換えられます（変数展開）。
シングルクォーテーションで文字列を囲んだ場合は変数展開されず、変数が{}で囲まれていてもそのまま文字列としてみなされます。

参考画像：PHP_image_16.jpg


if文
if文を使うと、条件に応じて処理を分岐することができます。
if文は図のように書きます。
条件が成り立つ場合、{}の中の処理が実行されます。
条件が成り立たない場合は処理が実行されません。

参考画像：PHP_image_17.jpg


数値を比較しよう
先ほどのスライドで出てきた、「>」のような2つの値を比較するための記号を比較演算子と呼びます。
比較した結果は真「true」か偽「false」のどちらかになります。代表的な比較演算子として、
図のようなものだあります。

参考画像：PHP_image_18.jpg


if文と真偽値
比較演算子を用いて比較した結果はtrueかfalseになります。
trueとfalseは真偽値と呼ばれます。真偽値は文字列や数値といったデータの種類の1つです。
真偽値はtrueとfalseの2つしかありません。
if文は、条件式がtrueの場合if文の中身が実行され、falseの場合は実行されません。

参考画像：PHP_image_19.jpg


elseif
elseifを用いることで、「もしも～だったら・・・、それとも～であれば・・・、いずれでもなければ・・・」といった
条件分岐が可能になります。elseifは必要な分岐の数だけ並べることができますが、複数の条件に合致した場合、
実行されるのは最初に合致したブロックだけとなります。

参考画像：PHP_image_20.jpg


&&,||
複数の条件式を組み合わせる
「&&」と「||」は論理演算子と呼ばれ、複数の条件を1つにまとめるときに使います。&&（かつ）は左右の式がともに「true」の場合、
全体も「true」になります。||（または）は左右の式のどちらか、または両方が「true」の場合、全体も「true」になります。

参考画像：PHP_image_21.jpg
